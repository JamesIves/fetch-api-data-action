{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/location.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  classScope: ClassScopeHandler;\n  prodParam: ProductionParameterHandler;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const Errors = Object.freeze({\n  ArgumentsDisallowedInInitializer:\n    \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction:\n    \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  // todo: rephrase to get/set accessor\n  ConstructorIsAccessor: \"Constructor can't have get/set modifier\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly one argument\",\n  ImportCallArityLtOne: \"Dynamic imports require a parameter: import('a.js')\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Octal literal in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  //todo: rephrase this error message as it is too subjective\n  TrailingDecorator: \"You have trailing decorators with no method\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  //todo: rephrase this error message as it is too subjective\n  UnsupportedDecoratorExport:\n    \"You can only use decorators on an export when exporting a class\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  //todo: remove Stage 2 as we are likely to forget updating when it progressed\n  UnsupportedParameterDecorator:\n    \"Stage 2 decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Stage 2 decorators disallow object literal property decorators\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n\nexport default class LocationParser extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/location\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkDuplicatedProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if (\n        prop.type === \"SpreadElement\" ||\n        prop.computed ||\n        prop.method ||\n        // $FlowIgnore\n        prop.shorthand\n      ) {\n        return;\n      }\n\n      const key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\" && prop.kind === \"init\") {\n        // Store the first redefinition's position\n        if (protoRef.used) {\n          if (refExpressionErrors && refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          } else {\n            this.raise(key.start, Errors.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        (!stmt.expression.extra || !stmt.expression.extra.parenthesized)\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        delete node.arguments;\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedListDeep(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): void {\n      // ImportExpressions do not have an arguments array.\n      if (!exprList) {\n        return;\n      }\n\n      super.toReferencedListDeep(exprList, isParenthesizedExpr);\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function(prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" && !this.state.exprAllowed) ||\n      (this.state.value === \"yield\" && this.prodParam.hasYield)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function(prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function() {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function(prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function(prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { keywords } from \"../tokenizer/types\";\n\nconst reservedWords = {\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\n\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport const isReservedWord = (word: string, inModule: boolean): boolean => {\n  return (inModule && word === \"await\") || word === \"enum\";\n};\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 0x80.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/location\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  //todo: replace ´ by `\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between ´%´ and ´checks´ are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, noIn, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          (!expr.extra || !expr.extra.parenthesized) &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refExpressionErrors,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              noIn,\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if ((jsx && jsx.error) || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(() => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        const arrowExpression: ?N.ArrowFunctionExpression =\n          arrow.node && arrow.node.type === \"ArrowFunctionExpression\"\n            ? arrow.node\n            : null;\n\n        if (!arrow.error && arrowExpression) return arrowExpression;\n\n        // If we are here, both JSX and Flow parsing attemps failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx && jsx.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx && jsx.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/location\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function() {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function(prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/location\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b000, // Initial Parameter flags\n  PARAM_YIELD = 0b001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b010, // track [Await] production parameter\n  PARAM_RETURN = 0b100; // track [Return] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above. Note that the [In] parameter is\n// tracked in `noIn` argument of `parseExpression`.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = typeof PARAM | typeof PARAM_AWAIT | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/location\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer:\n    \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution:\n    \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        if (\n          this.match(tt.comma) &&\n          this.lookaheadCharCode() !== charCodes.rightSquareBracket\n        ) {\n          this.raiseRestNotLast(this.state.start);\n        }\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          TSErrors.TemplateTypeHasSubstitution,\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            if (this.lookahead().type !== tt.num) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsync(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) && this.lookahead().type === tt.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n      return super.parseImport(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, noIn, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters && typeParameters.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx && jsx.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast && typeCast.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast && typeCast.thrown) throw typeCast.error;\n\n      throw (jsx && jsx.error) || arrow.error || (typeCast && typeCast.error);\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TSTypeCastExpression\") {\n          this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers && specifiers.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // TODO\n  containsOctal: boolean = false;\n  octalPosition: ?number = null;\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport LocationParser, { Errors } from \"../parser/location\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends LocationParser {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      this.hasPlugin(\"classPrivateProperties\") ||\n      this.hasPlugin(\"classPrivateMethods\") ||\n      this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n    ) {\n      this.finishOp(tt.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, \"#\");\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketL);\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceL);\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === charCodes.underscore) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === charCodes.lowercaseN) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(\n          start,\n          // todo: merge with Errors.StrictOctalLiteral\n          \"Legacy octal literals are not allowed in strict mode\",\n        );\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    // disallow numeric separators in non octal decimals and legacy octal likes\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input\n        .slice(start, this.state.pos)\n        .indexOf(\"_\");\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === charCodes.lowercaseN) {\n        // disallow floats, legacy octal syntax and non octal decimals\n        // new style octal (\"0o\") is handled in this.readRadixNumber\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          // $FlowFixMe\n          let octalStr = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else if (!this.state.containsOctal) {\n              // These properties are only used to throw an error for an octal which occurs\n              // in a directive which occurs prior to a \"use strict\" directive.\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpace } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\nimport { Errors } from \"./location\";\n\nconst literal = /^('|\")((?:\\\\?.)*?)\\1/;\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const next = this.nextTokenStart();\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== charCodes.equalsTo;\n    }\n    return false;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(\n        this.state.yieldPos,\n        \"Yield cannot be used as name inside a generator function\",\n      );\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(\n        this.state.awaitPos,\n        \"Await cannot be used as name inside an async function\",\n      );\n    }\n  }\n\n  strictDirective(start: number): boolean {\n    for (;;) {\n      // Try to find string literal.\n      skipWhiteSpace.lastIndex = start;\n      // $FlowIgnore\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      const match = literal.exec(this.input.slice(start));\n      if (!match) break;\n      if (match[2] === \"use strict\") return true;\n      start += match[0].length;\n\n      // Skip semicolon, if any.\n      skipWhiteSpace.lastIndex = start;\n      // $FlowIgnore\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      if (this.input[start] === \";\") {\n        start++;\n      }\n    }\n\n    return false;\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./location\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        if (contextDescription) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.InvalidLhs\n              : Errors.InvalidLhsBinding,\n            contextDescription,\n          );\n        } else {\n          // todo: check if contextDescription is never empty\n          const message =\n            (bindingType === BIND_NONE\n              ? \"Invalid\"\n              : /* istanbul ignore next */ \"Binding invalid\") +\n            \" left-hand side expression\";\n\n          this.raise(expr.start, message);\n        }\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./location\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // Check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  checkDuplicatedProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.computed ||\n      prop.kind ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `noIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `noIn` is true, the production parameter [In] is not present.\n  //   Whenever [?In] appears in the right-hand sides of a production, we pass\n  //   `noIn` to the subroutine calls.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    noIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const op = this.state.type;\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          arg.type === \"MemberExpression\" &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    }\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n    const computed = this.eat(tt.bracketL);\n    if (\n      (optional && !this.match(tt.parenL) && !this.match(tt.backQuote)) ||\n      computed ||\n      this.eat(tt.dot)\n    ) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed\n        ? this.parseExpression()\n        : optional\n        ? this.parseIdentifier(true)\n        : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n        this.classScope.usePrivateName(\n          node.property.id.name,\n          node.property.start,\n        );\n      }\n\n      if (computed) {\n        this.expect(tt.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (optional) {\n        node.optional = true;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(\n          tt.parenR,\n          state.maybeAsyncArrow,\n          base.type === \"Import\",\n          base.type !== \"Super\",\n          node,\n        );\n      }\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        //\n        // Hi developer of the future :) If you are implementing generator\n        // arrow functions, please read the note below about \"await\" and\n        // verify if the same logic is needed for yield.\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        // Await is trickier than yield. When parsing a possible arrow function\n        // (e.g. something starting with `async(`) we don't know if its possible\n        // parameters will actually be inside an async arrow function or if it is\n        // a normal call expression.\n        // If it ended up being a call expression, if we are in a context where\n        // await expression are disallowed (and thus \"await\" is an identifier)\n        // we must be careful not to leak this.state.awaitPos to an even outer\n        // context, where \"await\" could not be an identifier.\n        // For example, this code is valid because \"await\" isn't directly inside\n        // an async function:\n        //\n        //     async function a() {\n        //       function b(param = async (await)) {\n        //       }\n        //     }\n        //\n        if (\n          (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n          oldAwaitPos !== -1\n        ) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      this.input.slice(base.start, base.end) === \"async\"\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, Errors.ImportCallArity);\n      } else {\n        const importArg = node.arguments[0];\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, Errors.ImportCallSpreadArgument);\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (\n          !this.scope.allowSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          const last = this.state.context.length - 1;\n          if (this.state.context[last] !== ct.functionStatement) {\n            // Since \"async\" is an identifier and normally identifiers\n            // can't be followed by expression, the tokenizer assumes\n            // that \"function\" starts a statement.\n            // Fixing it in the tokenizer would mean tracking not only the\n            // previous token (\"async\"), but also the one before to know\n            // its beforeExpr value.\n            // It's easier and more efficient to adjust the context here.\n            throw new Error(\"Internal error\");\n          }\n          this.state.context[last] = ct.functionExpression;\n\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n          const oldYieldPos = this.state.yieldPos;\n          const oldAwaitPos = this.state.awaitPos;\n          this.state.maybeInArrowParameters = true;\n          this.state.yieldPos = -1;\n          this.state.awaitPos = -1;\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          this.checkYieldAwaitInDefaultParams();\n          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refExpressionErrors,\n          node,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(false, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, Errors.ImportCallArityLtOne);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal or binding pattern.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(tt.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkDuplicatedProto(prop, propHash, refExpressionErrors);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    return this.finishNode(\n      node,\n      isPattern ? \"ObjectPattern\" : \"ObjectExpression\",\n    );\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.match(tt.name) ||\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bracketL) ||\n        this.state.type.keyword ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refExpressionErrors,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.match(tt.string) || // get \"string\"() {}\n      this.match(tt.num) || // get 1() {}\n      this.match(tt.bracketL) || // get [\"string\"]() {}\n      this.match(tt.name) || // get foo() {}\n        !!this.state.type.keyword) // get debugger() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string) || this.match(tt.bigint)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldStrict = this.state.strict;\n    let useStrict = false;\n\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const nonSimple = !this.isSimpleParamList(node.params);\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.state.end);\n        // If this is a strict mode function, verify that argument names\n        // are not repeated, and it does not try to bind the words `eval`\n        // or `arguments`.\n        if (useStrict && nonSimple) {\n          // This logic is here to align the error location with the estree plugin\n          const errorPos =\n            // $FlowIgnore\n            (node.kind === \"method\" || node.kind === \"constructor\") &&\n            // $FlowIgnore\n            !!node.key\n              ? node.key.end\n              : node.start;\n          this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n        }\n      }\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      if (useStrict) this.state.strict = true;\n      // Add the params to varDeclaredNames to ensure that an error is thrown\n      // if a let/const declaration in the function clashes with one of the params.\n      this.checkParams(\n        node,\n        !oldStrict && !useStrict && !allowExpression && !isMethod && !nonSimple,\n        allowExpression,\n        !oldStrict && useStrict,\n      );\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false);\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    if (this.state.strict && node.id) {\n      this.checkLVal(\n        node.id,\n        BIND_OUTSIDE,\n        undefined,\n        \"function name\",\n        undefined,\n        !oldStrict && useStrict,\n      );\n    }\n    this.state.strict = oldStrict;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (allowEmpty && this.match(tt.comma)) {\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the\n      // context-managing code already ignored the keyword\n      if (\n        (name === \"class\" || name === \"function\") &&\n        (this.state.lastTokEnd !== this.state.lastTokStart + 1 ||\n          this.input.charCodeAt(this.state.lastTokStart) !== charCodes.dot)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInArrowParameters || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw new Error(\n          `Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`,\n        );\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./location\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis ||\n          nextTokenCharCode === charCodes.dot\n        ) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the function body. They are permitted in function\n        // default-parameter expressions, which are part of the outer context,\n        // outside of the function body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the function body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the function body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(node, allowDirectives, false, tt.braceR);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n  ): void {\n    let parsedNonDirective = false;\n    let oldStrict;\n    let octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, Errors.StrictOctalLiteral);\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in test\n    // expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(constructorAllowsSuper: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body. They are permitted in test expressions,\n    // outside of the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(tt.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true); // eats 'static'\n\n      if (this.isClassMethod()) {\n        const method: N.ClassMethod = (member: any);\n\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(\n          classBody,\n          method,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n        return;\n      } else if (this.isClassProperty()) {\n        const prop: N.ClassProperty = (member: any);\n\n        // a property named 'static'\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      // otherwise something static\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        // export async;\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, tt._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      this.isUnparsedContextual(next, \"from\")\n    );\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/location\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketR","braceL","braceBarL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","filename","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","Errors","Object","freeze","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallArityLtOne","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidCodePoint","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateNameRedeclaration","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","LocationParser","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","checkGetterSetterParams","prop","paramCount","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","checkDuplicatedProto","protoRef","refExpressionErrors","computed","shorthand","key","used","doubleProto","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","tt","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","prodParam","hasYield","isIterator","braceIsBlock","statementParens","test","b_stat","reservedWords","strict","strictBind","reservedWordsStrictSet","Set","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","fromCharCode","isIteratorStart","current","next","isIdentifierChar","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","noIn","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","specifiers","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","arrowExpression","resetStartLocationFromNode","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","parseCallExpressionArguments","abort","parseAsyncArrowWithTypeParameters","aborted","parseSubscript","subscriptState","isLookaheadRelational","optionalChainMember","stop","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","member","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","lookaheadCharCode","raiseRestNotLast","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsync","asyncArrowFn","parseTaggedTemplateExpression","args","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","isAbstractClass","parseStatementContent","ahead","parseClassMember","constructorAllowsSuper","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","ct","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","expectPlugin","exported","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","validatePlugins","decoratorsBeforeExport","join","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inParameters","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","containsOctal","octalPosition","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","nextTokenStart","thisTokEnd","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","afterNext","isUnparsedContextual","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","strictDirective","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObj","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","elem","ExpressionParser","getExpression","paramFlags","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","logical","coalesce","checkPipelineAtInfixOperator","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","parseExprSubscripts","maybeAsyncArrow","parseNoCallExpr","parseMaybePrivateName","classScope","usePrivateName","tag","quasi","importArg","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseImportMetaProperty","parseFunction","oldLabels","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","isExpression","oldStrict","useStrict","oldInParameters","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","from","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","statementStart","createNewLexicalScope","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassPropertyName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkNames","isDefault","isFrom","nodes","parseNext","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}